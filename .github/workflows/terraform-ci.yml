# This GitHub workflow tests and validates Terraform config (ML resource config and more)
# defined under databricks-config, when PRs are merged into the main branch
name: Terraform Tests for mlops-demo-classifier

on:
  workflow_dispatch:
  pull_request_target:
    paths:
      - 'databricks-config/**'

defaults:
  run:
    working-directory: ./databricks-config

# Code reference can be found at https://github.com/hashicorp/setup-terraform
jobs:
  staging:
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: https://e2-demo-emea.cloud.databricks.com/
      DATABRICKS_TOKEN: ${{secrets.STAGING_WORKSPACE_TOKEN}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      # TODO: Remove this workflow step after addressing other TODOs
      - name: Lint workflow files
        run: ../.github/workflows/scripts/no-todos.sh "../.github/workflows" "*.yml"
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        # TODO: Provide necessary terraform backend credentials here.
        # Typically, you can achieve this by running a GitHub Action or CLI command to fetch
        # auth information, setting the auth information as an environment variable for use by
        # subsequent terraform CLI steps.
        # 
        # For example, if using the s3 backend, you can use the aws-actions/configure-aws-credentials Action
        # (https://github.com/marketplace/actions/configure-aws-credentials-action-for-github-actions) to authenticate
        # to AWS. This should set environment variables that the Terraform S3 backend picks up automatically
        # (https://www.terraform.io/language/settings/backends/s3#credentials-and-shared-configuration)
        #
        # Note that GitHub Actions has special syntax for setting environment variables within a workflow step, described in
        # https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#setting-an-environment-variable
      - name: Terraform Init
        id: init
        run: terraform -chdir=staging init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=staging validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=staging plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}" \
          -var="github_repo=${{ github.repository }}" \
          -var="github_actions_token=${{ secrets.TRIGGER_WORKFLOWS_GITHUB_TOKEN }}"

      - name: Create Comment with Terraform Plan
        uses: actions/github-script@v6
        id: comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Staging Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Staging Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Staging Validation ü§ñ \`${{ steps.validate.outcome }}\`
            <details><summary>Staging Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Staging Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Show Staging Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  prod:
    runs-on: ubuntu-20.04
    env:
      DATABRICKS_HOST: https://e2-demo-emea.cloud.databricks.com/
      DATABRICKS_TOKEN: ${{secrets.PROD_WORKSPACE_TOKEN}}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}
      - uses: hashicorp/setup-terraform@v1
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true
        # TODO: Provide necessary terraform backend credentials here, similar to staging above
      - name: Terraform Init
        id: init
        run: terraform -chdir=prod init
      - name: Terraform Validate
        id: validate
        run: terraform -chdir=prod validate -no-color

      - name: Terraform Plan
        id: plan
        run: |
          terraform -chdir=prod plan -no-color \
          -var="git_repo_url=${{ github.server_url }}/${{ github.repository }}" \
          -var="github_repo=${{ github.repository }}" \
          -var="github_actions_token=${{ secrets.TRIGGER_WORKFLOWS_GITHUB_TOKEN }}"

      - name: Create Comment with Terraform Plan
        uses: actions/github-script@v6
        id: comment
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Prod Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Prod Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Prod Validation ü§ñ \`${{ steps.validate.outcome }}\`
            <details><summary>Prod Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>

            #### Terraform Prod Plan üìñ \`${{ steps.plan.outcome }}\`

            <details><summary>Show Prod Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>`

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
